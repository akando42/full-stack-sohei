{
  "date": "2020-06-22T09:02:12.618Z",
  "title": "Deploying the web app using Netlify and Github",
  "description": "What does the thing say about other important stuffs",
  "body": "# **Sliding Window** \n\nThis technique shows how a nested for loop in some problems can be converted to a single for loop to reduce the time complexity. Letâ€™s start with a problem for illustration where we can apply this technique.\n\n\n\n\n\n>\n>\n> ```chs\n> # code\n> import sys\n> print \"GFG\"\n> # O(n * k) solution for finding\n> # maximum sum of a subarray of size k\n> INT_MIN = -sys.maxsize - 1\n>  \n> # Returns maximum sum in a\n> # subarray of size k.\n>  \n>  \n> def maxSum(arr, n, k):\n>  \n>     # Initialize result\n>     max_sum = INT_MIN\n>  \n>     # Consider all blocks\n>     # starting with i.\n>     for i in range(n - k + 1):\n>         current_sum = 0\n>         for j in range(k):\n>             current_sum = current_sum + arr[i + j]\n>  \n>         # Update result if required.\n>         max_sum = max(current_sum, max_sum)\n>  \n>     return max_sum\n>  \n>  \n> # Driver code\n> arr = [1, 4, 2, 10, 2,\n>        3, 1, 0, 20]\n> k = 4\n> n = len(arr)\n> print(maxSum(arr, n, k))\n>  \n> # This code is contributed by mits\n> ```\n\n\n\n[READ MORE HERE](https://www.geeksforgeeks.org/window-sliding-technique/)\n\n![](/img/sliding-window1.png)",
  "video_link": "https://www.youtube.com/watch?v=5Ryp6UTCeUo&t=24s",
  "video_id": "b41K3xEmuoY"
}